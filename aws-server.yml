---
Description: >
  AWS CloudFormation script that creates Servers.  This includes:
   - IAM Roles
   - Load Balancer
   - Auto Scaling Groups
   - Bastion Host/JumpBox

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  
  JumpboxKey: 
    Description: Key for Jumpbox EC2 Instance
    Type: String
  
  AmiIDAutoscale:
    Description: AMI ID of Autoscale EC2 Instances (Ubuntu)
    Type: String

  AmiIDJumpbox:
    Description: AMI ID of Jumpbox EC2 Instances (Amazon Linux)
    Type: String

  UserIPAddr:
    Description: User IP Address (For Enable SSH Ingress to SSH into Jumpbox)
    Type: String

  AutoscaleServerType:
    Description: Autoscale EC2 Instance Type
    Type: String

  JumpboxServerType:
    Description: Jumpbox EC2 Instance Type
    Type: String

  S3Name:
    Description: Endpoint for S3 Bucket
    Type: String
  
  # In Addition, the Following Exports are used from aws-network.yml
  # - VPC:                    ${EnvironmentName}-VPC
  # - PublicSubnets:          ${EnvironmentName}-PUB-NETS
  # - PrivateSubnets:         ${EnvironmentName}-PRIV-NETS
  # - PublicSubnet1:          ${EnvironmentName}-PUB1-SN
  # - PublicSubnet2:          ${EnvironmentName}-PUB2-SN
  # - PrivateSubnet1:         ${EnvironmentName}-PRI1-SN
  # - PrivateSubnet2:         ${EnvironmentName}-PRI2-SN
  # - VPCPublicRouteTable:    ${EnvironmentName}-PUB-RT
  # - VPCPrivateRouteTable1:  ${EnvironmentName}-PRI1-RT
  # - VPCPrivateRouteTable2:  ${EnvironmentName}-PRI2-RT

Resources:

  # IAM
  # - Role for EC2 Instances
  S3ReadOnlyEC2Role: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
  
  # - Policy for EC2 Instances
  S3ReadOnlyEC2Policy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "s3:*"
            #Action: "s3:GetObject"
            Resource: '*'
      Roles:
        - Ref: S3ReadOnlyEC2Role

  # - Instance Profile
  ServerInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: 
        - !Ref S3ReadOnlyEC2Role

  # Security Groups
  # SecGroup - Load Balancer/Webservers
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # SecGroup - Webservers in AutoScaling Group
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH to WebServers, all traffic outbound
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  
  # SecGroup - Jumpbox
  JumpboxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound TCP port 22 (SSH), unrestricted outbound
      GroupName: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref UserIPAddr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"  # NETWORK EXPORT
      Tags: 
        - Key: "Name"
          Value: !Sub ${EnvironmentName} EC2 Security Group

  # AutoScaling
  # AS - Launch Config for EC2 instances
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          mv index.html index.html.bk
          aws s3 cp s3://${S3Name}/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref AmiIDAutoscale
      IamInstanceProfile: !Ref ServerInstanceProfile
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: !Ref AutoscaleServerType
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  # AS - Autoscaling Group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # Load Balancer
  # LB - Resource
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  # LB - Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  # LB - Listener Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  # LB - Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPC"

  # Jumpbox EC2 Instances
  JumpboxInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      IamInstanceProfile: !Ref ServerInstanceProfile
      ImageId: !Ref AmiIDJumpbox
      InstanceType: !Ref JumpboxServerType
      KeyName: !Ref JumpboxKey
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref JumpboxSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PUB1-SN"  # NETWORK EXPORT
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvironmentName} Jumpbox EC2 (AZ1)

Outputs: 

  # Load Balancer HTTP URL
  LBDNSName:
    Description: Load Balancer DNS Name
    Value: !Sub "http://${WebAppLB.DNSName}/"
    Export:
      Name: !Sub ${EnvironmentName}-LB-URL

  # Jumpbox HTTP URL
  JumpboxDNSName: 
    Description: JumpBox DNS Name
    Value: !Sub "http://${JumpboxInstance.PublicDnsName}/"
    Export:
      Name: !Sub ${EnvironmentName}-JUMPBOX-URL
...